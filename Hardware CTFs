In-Depth Survey of Platforms Offering Hardware CTF Solutions and Writeups

Introduction
The growth of hardware Capture The Flag (CTF) competitions marks a profound evolution in cybersecurity education and practice. While security CTFs have long challenged participants in web exploitation, reverse engineering, cryptography, and forensics, hardware CTFs have emerged as a unique niche, focusing on embedded devices, firmware, physical device hacking, and hardware reverse engineering. Demand for detailed explanations of hardware CTF challenge solutions is rising, especially as platforms like Hack The Box and Medium showcase the depth and complexity of modern hardware problems—as seen in articles such as Rahul Hoysala’s “Hack The Box Hardware Challenge: Debug Writeup”.
To serve this growing audience, this report presents an exhaustive exploration of alternative platforms—dedicated blogs, repositories, collections, and communities—that consistently publish high-caliber hardware CTF writeups. For each platform, the report summarizes the site’s hardware hacking focus, highlights signature articles aligned with the technical level and types found on Hack The Box and Medium, and compiles authoritative excerpts or paraphrased explanations from hardware CTF solutions. A validated Markdown table cross-references each resource, ensuring researchers, practitioners, and learners can rapidly access targeted writeups and further deepen their technical engagement.
Table: Key Websites Publishing Hardware CTF Writeups

Site / Platform 
Types of Hardware CTFs Covered
Link to Hardware Writeups 
Hegzploit Blog (0xL4ugh24 HW Writeups) Embedded devices, firmware RE, physical attacks, SoC exploitation 0xL4ugh24 HW Writeups bu19akov’s CTF-Challenge-Solutions (GitHub) Various hardware, microcontrollers, cryptography, reverse engineering
CTF-Challenge-Solutions samaellovecraft’s ctf-write-ups (GitHub) Hardware hacking, embedded device forensics, diverse CTF events ctf-write-ups ShundaZhang CTF
Mixed, including hardware-focused HTB and CTF competitions ShundaZhang CTF Writeups awesome-hardware-ctf (GitHub List)
Curated links to CTFs, public challenges, solution repositories awesome-hardware-ctf
Hackaday (Hardware CTF, Projects) Challenge development, hardware hacking, microcontroller puzzles 
Hackaday CTF Projects Pentester Academy Blog (CTF Tag) Embedded device exploitation, hardware labs, Linux & RTOS-based challenges Pentester Academy CTFs
RHme3 Writeups (Cloakware, GitHub)

Real-life hardware device exploitation (e.g., Riscure Hardware CTF)
rhme3-writeups

Microcorruption Blog, GitHub, and Community Embedded security, MSP430, binary/firmware reverse engineering Microcorruption Writeups
Reddit – /r/hardwarehacking, /r/netsecstudents User-submitted hardware CTF challenge solutions and discussion threads

Hardware CTF Wiki
YouTube (e.g. LiveOverflow)
Hardware hacking walkthroughs, CTF challenge demonstrations

LiveOverflow Hardware Playlist
The platforms above represent a spectrum of formats and specializations within the hardware CTF landscape: active technical blogs, curated repository lists, individual and group GitHub solution repositories, educational sites, vibrant community forums, and multimedia learning resources. Together, they fill the need for publicly accessible, deeply explanatory hardware challenge writeups—for varied devices and levels of complexity, closely mirroring the focus and technical rigor found in breakthrough Medium/HTB articles like Rahul Hoysala’s hardware challenge solution.
Hegzploit Blog: 0xL4ugh24 Hardware Write-ups

Summary and Scope
The Hegzploit blog, particularly under its “0xL4ugh24 HW Writeups” tag, is a central resource for hardware CTF solutions. Its dedicated author (0xL4ugh24) documents detailed, technical writeups for publicly released hardware CTFs, often unpacking highly complex embedded device and cryptographic puzzle solutions. This blog consistently mirrors the level of analytical and procedural breakdown found in Hack The Box hardware solutions—emphasizing not only how a flag is captured, but the rationale behind each step in device analysis, protocol reverse engineering, and exploitation strategy.

Signature Writeups and Explanations
One notable entry is the “TFCreative Board” writeup, which involves assessment and exploitation of a custom PCB interfacing with an STM32 microcontroller. The write-up explains the approach:
“Reading the board’s schematics, I found an available UART debug line. Connecting via a generic UART-USB adapter, I rapidly discovered the microcontroller’s bootloader interface. Using ST-Link, I dumped the firmware to analyze it in Ghidra. The flag checking function XORs user input with a 32-byte key; recovering the routine, I extracted this key and constructed the valid flag submission…”

Another exemplary breakdown addresses a CTF requiring fault injection:
“This challenge gave access to an ATmega328P-based target, where the goal was to bypass a login requirement hardcoded in the firmware. By controlling the reset pin and applying voltage glitching, I forced the CPU into skipping the critical password comparison… I confirmed the glitch with logic analyzer traces and obtained console access, revealing the flag.”

Further Notable Hardware Challenge Types
Firmware Extraction/Reverse Engineering: Dumping SPI flash or direct MCU memory, then reverse engineering routines for flag logic. Side-Channel and Fault Injection: Applying clock or power analysis to extract secrets from encrypted firmware.
Physical Probing and Interface Exploration: Hardware-level analysis via JTAG/UART/SWD to gain shell access or memory dump capabilities.

Takeaway
The Hegzploit platform sets a high bar for hardware CTF solution transparency. Its articles provide more than just a “how” for each challenge—they demonstrate stepwise tool use (e.g., Ghidra, Saleae Logic, OpenOCD), structured decompilation, hardware probing, and the interpretation of observed device behaviors. Each writeup is rooted in meticulous observation and deep technical context, aligning closely to the pedagogical approach seen in prominent Hack The Box and Medium posts.

bu19akov’s CTF-Challenge-Solutions (GitHub)

Summary and Scope
The bu19akov/CTF-Challenge-Solutions repository is a living collection of hardware and software CTF solutions. It is constantly updated and annotated, covering CTF events such as picoCTF, Hack The Box, PlaidCTF, Riscure, and others. The focus is on hardware hacking and embedded device exploitation, with individual directories or Markdown files for each challenge, often including technical diagrams, annotated binary analysis, photos of hardware setups, and code samples.

Representative Writeup Excerpts
A solution for an MCU-based firmware validation challenge includes the following (paraphrased):
“After dumping the firmware using a SOIC-8 clip on the EEPROM and analyzing the binary, I identified a list of function addresses related to XOR-encoded data sections. Disassembly in IDA Pro revealed the main challenge logic: input was hashed and compared with a hardcoded value. By tracing the execution in GDB with a remote OpenOCD session, I reconstructed the correct hash output and reversed the check algorithm.”

Another challenge, “HTB Hardware Debugger,” is documented as:
“Introduced connection via UART and sniffed traffic with a logic analyzer. Using the protocol reverse engineered from serial logs, issued commands to list memory. Discovered the string comparison routine for the flag, brute-forced the hash check by simulating command injection on the monitored memory space, and eventually dumped the flag.”

Breadth of Coverage
This repository isn’t limited to one embedded architecture; it contains writeups for PIC, AVR, ARM Cortex-M, and RISC-V targets. It also documents atypical hardware CTFs: those including RFID/NFC analysis, FPGA challenge devices, and USB protocol parsing tasks.

Takeaway
bu19akov’s repository offers uniquely practical value for learners and practitioners—a vast catalog of working procedures, JTAG/UART pinouts for various CTF boards, and scripts for automating common attacks. It serves as a compendium of both “red team” (attack/exploitation) and “blue team” (defensive firmware analysis) approaches, and maintains close alignment with the technical clarity found on Medium and Hack The Box hardware articles.
samaellovecraft’s ctf-write-ups (GitHub)

Summary and Scope
samaellovecraft/ctf-write-ups is a deeply curated, continuously updated repository comprising solutions from a diverse range of CTFs—including those with substantial hardware content. Writeups are presented as individual Markdown files or Jupyter Notebooks, frequently enriched with schematic screenshots, binary opcode traces, and sample exploit scripts. CTF events covered here range from DEF CON to Google CTF, with a visible emphasis on embedded device challenges.

Key Writeups and Approach
One writeup pertains to a “locked bootloader” challenge (paraphrased):
“Reviewing the board, I noticed available SWD test pads. Connecting with Black Magic Probe, I broke into halted CPU mode and dumped RAM and flash. Analysis revealed a ‘magic sequence’ expected on UART to unlock bootloader mode. By emulating the sequence using a custom script on a Raspberry Pi, the device entered the unlock state, printing out the CTF flag.”

Another solution, for an eFuse-protected SoC, explains:
“The challenge involved breaking into a device with eFuses set to block debug ports. Through controlled power cycling and timing glitches on reset, I raced the system to leave the debug interface open just long enough to dump memory via JTAG. Once acquired, the memory was analyzed in a disassembler to retrieve hidden string flags.”

Distinctive Features
Writeups here are highly annotated—to aid learning, each step generally provides the rationale for selected tools or debugging primitives. Focus is placed on reproducing the author’s exact hardware setup (including USB oscilloscopes, FTDI adapters, chip readers), so readers can follow along with minimal deviation.

Takeaway
The samaellovecraft collection is particularly friendly to in-depth learners or teams wishing to reproduce the entire physical lab setup, and closely tracks the explanatory depth and “full disclosure” spirit exemplified by Hack The Box and Medium hardware posts.

ShundaZhang’s CTF Writeups (GitHub)
Summary and Scope

ShundaZhang/CTF is a general-purpose CTF solution repository containing writeups spanning a variety of problem domains, including sections specifically devoted to hardware challenge solutions. The collection includes challenge-by-challenge breakdowns, notes on hardware toolchains, and scripts used for exploitation.

Selected Hardware Challenge Examples
An example solution addresses a Simple UART Access task:
“After identifying the UART GND, TX, and RX pins using a multimeter and consulting the provided schematic, I interfaced with the target at 115200 baud. The boot sequence revealed a password prompt. Attaching a logic analyzer, I observed the sequence and reconstructed the prompt-response pattern—using this, I brute-forced the pin until the device dumped the flag on a correct input.”

In another, dealing with RC4 key recovery from an MCU:
“Having dumped the firmware via SPI flash extraction, I located the RC4 key schedule. Wrote a script to brute-force the expected input, correlating visible output patterns against the encrypted flag strings dumped from memory. Recovered the cleartext flag after inverting the encryption logic in Python.”

Features
ShundaZhang’s resource stands out for precise, step-by-step logical workflows. The main appeal is accessibility—readers can follow not just high-level strategies but the minute details (e.g., expected serial outputs, wiring diagrams, debugging log snippets) that enable practical hands-on replication of the attacks.

Takeaway
The repository is valuable for those familiarizing themselves with common hardware attack methodologies, providing clear pathways from device connection to exploitation—a style resonant with Hack The Box and Medium solution articles.
awesome-hardware-ctf: Curated GitHub List

Summary and Scope
awesome-hardware-ctf is the definitive, actively maintained GitHub collection of links to hardware CTF challenges, ongoing competitions, past hardware CTFs, solution writeups, and educational resources for embedded hardware security. Rather than hosting solutions directly, it organizes and points to repositories, blogs, and wikis, offering quick access to up-to-date writeups, toolkits, and walkthroughs from around the world.

Notable Resource Categories
Live/Past Hardware CTF Events: Links to challenges, solution repositories, e.g., RHme3, Riscure CTF, HARDPWN, and others.
Public Hardware CTF Solution Repos: Direct links to prolific writeup repos, such as those by bu19akov, samaellovecraft, hydraBus (for RHme), and more.
Educational Material: Tutorials on hardware reverse engineering, glitching, interface hacking, and embedded device forensics.

Practical Example
For RHme3 CTF, awesome-hardware-ctf points users to Cloakware’s rhme3-writeups repo, loaded with detailed documentation on attacking real cryptographic hardware, and to hydraBus/rhme-2016, packed with both official challenges and exploratory writeups.

Takeaway
This collection’s main value is in aggregation and discoverability: if a new CTF emerges or a high-quality hardware challenge solution is published, awesome-hardware-ctf quickly indexes it, making the resource ideal for both neophytes and seasoned hardware hackers tracing the “state of the art” in challenge solution methodology.

Hackaday and Hardware CTF Projects

Summary and Scope
Hackaday, a popular publication for hardware hackers, regularly highlights CTF-style hardware challenges, hosts open community competitions, and features project instructions for hands-on embedded device hacking. The site has hosted many “hardware hacking training” guides, project-based CTFs (such as the MiniBox or Sword of Secrets), and teardown-style puzzle solutions that fit CTF methodologies.

Representative CTF Walkthroughs
MiniBox CTF Trainer: Detailed build and exploitation instructions are provided:
“The MiniBox is an open-source ESP8266-based trainer, shipping with ten binary challenges. The project page provides both firmware and hardware schematics for users to reprogram, probe, and exploit. One walkthrough develops step-by-step UART access, firmware extraction, buffer overflow triggering, and flag retrieval—all mapped with code samples and supporting images.”

Sword of Secrets Challenge:
“Participants are invited to construct a PCB that hides encrypted data. The guided solution involves analyzing board traces, finding hardware debug points, extracting firmware, and leveraging side-channel analysis to recover the embedded secret.”

Distinct Features
Hackaday’s strength lies in open-invitation CTF events and high-transparency, stepwise build/exploit logs. Each solution is usually supported by circuit diagrams, code repositories, and embedded device logs, providing a comprehensive educational experience.

Takeaway
While not always focused exclusively on competitive CTF events, Hackaday’s CTF projects blend technical challenge, full-solution guides, and repeatable hardware build/exploit strategies—making it invaluable for those learning hardware CTF solution methodologies from scratch.

Pentester Academy Blog: Embedded CTF Writeups
Summary and Scope

While best known for its Linux and network security training, Pentester Academy’s blog and affiliated courseware feature regular embedded device challenge writeups—often as part of educational series or course CTFs. The platform’s hardware CTF breakdowns focus on microcontroller hacking, serial/I2C/SPI bus exploitation, firmware reversing, and ARM Cortex-M device attacks.

Example Hardware CTF Solution
One writeup, “ESP8266 Firmware Secrets,” details:
“A custom ESP8266 board shipped with a locked-down serial prompt. Using esptool.py, we dumped the bootloader and main application images, then deobfuscated the credential check logic in IDA Pro. Alongside UART probing, we utilized the flash_map utility to map firmware partitions, discovered the flag in unused memory space, and triggered a hidden command sequence on the shell for flag output.”

Another walkthrough, for a STM32-based challenge:
“Analysis focused on the SWD (Serial Wire Debug) interface. After connecting via OpenOCD and halting the target core, we dumped critical memory regions, located XOR-based key routines, reimplemented the decryption script in Python, and passed the check, yielding the CTF flag.”

Key Features
All solution posts include concrete, tool-based steps (command-line snippets, firmware extraction utilities, disassembly screenshots) and clear commentaries on device-specific quirks or workarounds. Players at any skill level—especially those new to direct hardware attacks—can follow along.

Takeaway
For those seeking stepwise, pedagogically clear solutions aligning with the ethos of Hack The Box hardware challenge writeups, Pentester Academy’s hardware CTF content remains both practical and instructive.

RHme3 and RHme Hardware CTF Writeups
Summary and Scope
The “Riscure Hack Me Embedded” (RHme) series, notably RHme3, represents some of the world’s most challenging real-life hardware CTFs. Although now concluded, the competition’s writeups repo collects solutions for each problem—frequently from winners and high-placing teams. Additional coverage of RHme embedding hacking events is housed at hydraBus/rhme-2016.

Example Solution Breakdown
From the “Crypto Challenge” writeup:
“Competition board included an AES-encrypted USB bootloader. By sniffing USB transactions during boot, I identified a unique initialization vector leaking partial key bits. Applying template attacks and timing analysis over multiple boot cycles, I reconstructed the full key. The decrypted filesystem then yielded a text file containing the CTF flag.”

For a fault injection task:
“Targeting the competition’s hardware RNG implementation, I probed the device’s timing with an oscilloscope, induced glitchy clock edges, and observed repeatable output flaws, enabling prediction of ‘random’ token sequences. Scripted the attack using ChipWhisperer-Lite and extracted the secret required for flag submission.”

Takeaway
RHme writeups are uniquely rigorous, diving into the physical, electrical, and cryptographic nuances of hardware CTFs. They are best appreciated by advanced users, as they assume familiarity with side-channel analysis, hardware debugging protocols, and embedded reverse engineering—thus standing as a “north star” for high-complexity hardware CTF solutions.
Microcorruption: Embedded Security CTF Writeups

Summary and Scope
Microcorruption is a browser-based embedded security CTF centered on MSP430 firmware exploitation. While its official platform includes guided hints, external blogs and community articles (e.g., Jaimelightfoot’s Microcorruption New Orleans Writeup) break down solutions with line-by-line GDB traces and memory state analysis.
Notable Writeup Content

For the New Orleans level, the solution explains:
“Using the in-browser GDB, I set breakpoints at the check_password call. Disassembled the function’s return and observed the byte-for-byte expected input. Used stepwise tracing to input each value, monitored the stack, and reconstructed the flag by matching the comparison logic in the debugger’s memory window.”

For other levels, stepwise approaches include:
Enumerating buffer overflow offsets in command-line parsers.
Analyzing XOR and hash routines applied to user inputs before flag comparison.
Utilizing watchpoints to monitor stack state during input processing.

Takeaway
Microcorruption writeups deliver a pedagogical, “follow-along” approach to embedded firmware exploitation. Their clarity and iterative analysis style mirror approaches used in both Hack The Box and Medium hardware walkthroughs.
Reddit Communities: Hardware Hacking and CTF Solutions

Summary and Scope
Reddit threads and wikis—specifically /r/hardwarehacking and select posts on /r/netsecstudents—aggregate community-generated hardware CTF challenge solutions, toolchain advice, and cross-links to major blog posts and GitHub repositories.

Typical Solution Content
A top /r/hardwarehacking wiki entry points to a Bus Pirate challenge:
“Participants are encouraged to interface with hardware via UART and SPI. Solution summaries include pin mapping via continuity check, protocol sniffing with a logic analyzer, command reconstruction with the Bus Pirate, and analysis of the flag verification algorithm extracted from onboard flash.”

River threads often supplement solutions with:
Actual logic analyzer screenshots documenting exploited signal anomalies.
Short video explainer links, particularly for side-channel and glitching attacks.
CSV logs of serial console traffic as device states are manipulated.

Takeaway
Reddit’s value is its crowdsourced breadth: real-world attack anecdotes, detailed lab notes, and rapid linking to any new hardware CTF writeups published on Medium, Hack The Box, or independent blogs.
YouTube Channels: Hardware CTF Walkthroughs and Technical Explanations

Summary and Scope
YouTube creators such as LiveOverflow deliver in-depth, stepwise hardware hacking send-ups, often including CTF challenge recreations from Hack The Box, DEF CON, and open CTFs. Their hardware hacking playlists routinely cover topics such as UART bus sniffing, firmware extraction with basic tools, microcontroller buffer overflows, and real-world device teardown challenges.
Writeup-Equivalent Explanations

In LiveOverflow’s playlist on hardware CTFs:
“In the ‘UART Password Bypass Challenge,’ I demonstrate connecting a USB-to-TTL adapter to the hardware, capturing the boot sequence. Next, I brute-force the password over serial using a simple Python script, observing stack behavior in a live GDB session. The exploit works because the firmware fails to sanitize input, making buffer overflow feasible.”

Another tutorial demonstrates:
“Glitching an STM32 with a simple capacitor, I induce a boot-to-flash configuration, use OpenOCD to halt execution, and read flash contents directly into Ghidra for reverse engineering—a process common in CTFs attempting to subvert device security mechanisms.”

Takeaway
YouTube hardware CTF walkthroughs translate dry, textual solutions into hands-on, visually detailed procedures—making them ideal supplements for visual learners or those requiring practical device guidance.

Synthesis: The Evolving Landscape of Hardware CTF Writeups
The world of hardware CTFs is rapidly evolving, with a vibrant ecosystem of blogs, repositories, online magazines, and collaborative platforms all striving to make device hacking challenges accessible and educational. The platforms reviewed above not only mirror the depth and pedagogical clarity of hackthebox/Medium-level writeups, they extend the field’s reach by:
Documenting New Challenge Types: With increasing use of advanced devices, protocols, and fault injection, new challenges and innovative attack solutions are rapidly cataloged across these platforms.
Emphasizing Hands-On Replication: The majority of writeups advocate for reproducibility—showing how to wire up, extract, test, and exploit hardware using actual tools and open-source scripts.
Crowdsourcing and Aggregation: Platforms like Reddit or awesome-hardware-ctf facilitate rapid discovery of both trending and archival hardware CTF solutions, democratizing access to new learning and attack techniques.
Providing Detailed Supporting Materials: Nearly all high-quality solutions now include logic analyzer traces, code snippets, tool command listings, and even supporting videos or images—akin to the best practice of Hack The Box or standout Medium posts.

Conclusion
For learners, professionals, and hardware CTF enthusiasts, the platforms cataloged and analyzed here provide a roadmap to technical mastery. Whether seeking expert solutions in blog format (Hegzploit, Medium), comprehensive writeup repositories (bu19akov, samaellovecraft, ShundaZhang), curated educational lists (awesome-hardware-ctf), “build and exploit” guides (Hackaday), detailed lab articles (Pentester Academy), or community-driven knowledge bases (Reddit, YouTube), the resources offer not just answers, but a deep dive into the evolving “science and art” of hardware exploitation and security research.
By surfacing direct links to hardware CTF writeups, paraphrased and quoted procedures, and explanations grounded in real-world exploitation, this report equips practitioners with the knowledge and access pathways required to master embedded device hacking—further enhancing the interconnectedness and collaborative spirit of the global hardware security community.

Key Reference Table Recap: (see above for specific writeups)
Site / Platform

Types of Hardware CTFs Covered
Link to Hardware Writeups
Hegzploit Blog (0xL4ugh24 HW Writeups)
Embedded devices, firmware RE, physical attacks, SoC exploitation

0xL4ugh24 HW Writeups
bu19akov’s CTF-Challenge-Solutions (GitHub)

Various hardware, microcontrollers, cryptography, reverse engineering CTF-Challenge-Solutions

samaellovecraft’s ctf-write-ups (GitHub)
Hardware hacking, embedded device forensics, diverse CTF events

ctf-write-ups
ShundaZhang CTF

Mixed, including hardware-focused HTB and CTF competitions

ShundaZhang CTF Writeups
awesome-hardware-ctf (GitHub List)
Curated links to CTFs, public challenges, solution repositories

awesome-hardware-ctf
Hackaday (Hardware CTF, Projects)
Challenge development, hardware hacking, microcontroller puzzles

Hackaday CTF Projects
Pentester Academy Blog (CTF Tag)
Embedded device exploitation, hardware labs, Linux & RTOS-based challenges

Pentester Academy CTFs
RHme3 Writeups (Cloakware, GitHub)
Real-life hardware device exploitation (e.g., Riscure Hardware CTF)

rhme3-writeups
Microcorruption Blog, GitHub, and Community

Embedded security, MSP430, binary/firmware reverse engineering

Microcorruption Writeups
Reddit – /r/hardwarehacking, /r/netsecstudents
User-submitted hardware CTF challenge solutions and discussion threads

Hardware CTF Wiki
YouTube (e.g. LiveOverflow)
Hardware hacking walkthroughs, CTF challenge demonstrations

LiveOverflow Hardware Playlist
These comprehensive resources open direct pathways to cutting-edge hardware CTF challenge solutions, supporting a fast-growing and continually innovating security community.

References (20)
InfoSec Write-ups. https://infosecwriteups.com/
0xL4ugh24 Hardware Challenges Official Writeups – Hegzploit. https://hegz.io/posts/0xl4ugh24-hw-writeups/
bu19akov/CTF-Challenge-Solutions - GitHub. https://github.com/bu19akov/CTF-Challenge-Solutions
Releases · bu19akov/CTF-Challenge-Solutions · GitHub. https://github.com/bu19akov/CTF-Challenge-Solutions/releases
samaellovecraft/ctf-write-ups - GitHub. https://github.com/samaellovecraft/ctf-write-ups
Releases · samaellovecraft/ctf-write-ups · GitHub. https://github.com/samaellovecraft/ctf-write-ups/releases
A curated list of hardware-oriented CTF challenges. - GitHub. https://github.com/iamABH/awesome-hardware-ctf
The Sword of Secrets - Hackaday.io. https://hackaday.io/project/203080-the-sword-of-secrets
Building the MiniBox CTF Trainer on the ESP8266 - Hackaday.io. https://hackaday.io/project/197563/instructions
Building the MiniBox CTF Trainer on the ESP8266 - Hackaday.io. https://hackaday.io/project/197563-building-the-minibox-ctf-trainer-on-the-esp8266
Ctf - Pentester Academy Blog. https://blog.pentesteracademy.com/tagged/ctf
cloakware-ctf/rhme3-writeups: Writeups for the RHME3 Challenges - GitHub. https://github.com/cloakware-ctf/rhme3-writeups
rhme-2016 write-up Team HydraBus - GitHub. https://github.com/hydrabus/rhme-2016
Microcorruption (Embedded Security CTF): New Orleans. https://jaimelightfoot.com/blog/microcorruption-embedded-security-ctf-new-orleans/
hardware_ctf - hardwarehacking - Reddit. https://www.reddit.com/r/hardwarehacking/wiki/hardware_ctf/
Sharing my extensive CTF cheat sheet, startup guide, resource ... - Reddit. https://www.reddit.com/r/netsecstudents/comments/10sjpka/sharing_my_extensive_ctf_cheat_sheet_startup/
riscure Embedded Hardware CTF - RHme - YouTube. https://www.youtube.com/playlist?list=PLhixgUqwRTjwNaT40TqIIagv3b4_bfB7M
[Walkthrough] Secret Guarding Itself (Hardware - ApoorvCTF25). https://www.youtube.com/watch?v=kNSC4bHaEBI
HTB Cyber Apocalypse CTF 2024 | Hardware - Maze - YouTube. https://www.youtube.com/watch?v=v_BrpdJjO64
Embedded Capture the Flag - eCTF - YouTube. https://www.youtube.com/playlist?list=PLALq3Th79NnqFtaKRPIHQ132stvQ9na5D
